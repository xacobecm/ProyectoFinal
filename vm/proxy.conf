log_format proxy 'http [$time_local] $status $request_method $scheme $host "$request_uri" [Client $remote_addr] [Length $body_bytes_sent] [Time $request_time] "$http_user_agent" "$http_referer"';

upstream registry {
    server registry:5000;
}

upstream ui {
    server ui:80;
}

map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
    '' 'registry/2.0';
}

server {
    server_name local;
    listen 80 default;
    access_log /dev/stdout proxy;
    charset utf-8;
    proxy_set_header X-Forwarded-Scheme $scheme;
    server_tokens off;
    client_max_body_size 0;
    chunked_transfer_encoding on;
    location /health {
        allow all;
        access_log off;
        return 200 'OK';
    }

    location ~ /v2.* {
        if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
            return 404;
        }

        add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

        add_header Last-Modified $date_gmt;
        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        if_modified_since off;
        expires off;
        etag off;

        proxy_set_header Host              $http_host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout                 900;
        proxy_pass https://registry;
    }

    # Frontend
    location / {
        add_header Last-Modified $date_gmt;
        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        if_modified_since off;
        expires off;
        etag off;

        proxy_set_header Host $host;
        proxy_pass http://ui;
    }
}

